syntax = "proto3";

package terminalEz;

service TerminalEz {
  // Create a new SSH session for a given computer.
  rpc InitiateConnection (InitialConnectionRequest) returns (InitialConnectionResponse);

  // Stream real-time commands and terminal outputs to the session.
  rpc Channel (stream ClientUpdate) returns (stream ServerUpdate);

  // Gracefully shut down an existing SSH session.
  rpc Close (CloseRequest) returns (CloseResponse);
}

message InitialConnectionRequest {
  string m_name = 1;        // Machine Name of the host. format: "username@hostname"
}

message InitialConnectionResponse {
  string session_id = 1;    // Random 10 digit session ID.
  string url = 2;           // URL to connect to the session.
}

message NewShell {
  uint32 shell_id = 1; // Unique identifier for the shell
  int32 x = 2;          // X position of the shell
  int32 y = 3;          // Y position of the shell
}

// Message for sending data to the shell from the web client to the host machine
message TerminalInput {
  uint32 shell_id = 1; // Unique identifier for the shell
  bytes data = 2; // Data to be sent to the shell
  uint64 offset = 3; // Offset of the first byte for encryption.
}

// Message for receiving data from the shell on the host machine to the web client
message TerminalOutput {
  uint32 shell_id = 1; // Unique identifier for the shell
  bytes data = 2; // Data received from the shell
  int64 seq_num = 3; // Sequence number for synchronization
}

// Sequence numbers for all active shells, used for synchronization
message SequenceNumbers {
  map<uint32, uint64> map = 1;    // Active shells and their sequence numbers
}


// Message for the web client from the the host machine
message ClientUpdate {
  oneof client_message {
    string session_id = 1;        // Random 10 digit session ID.
    TerminalOutput data = 2;      // Stream data from the host terminal.
    NewShell created_shell = 3;   // Acknowledge that a new shell was created.
    uint32 closed_shell = 4;      // Acknowledge that a shell was closed.
    int64 pong = 5;               // Pong message, response to the timestamp
    string error = 6;             // Error message
  }
}


// Message for the host machine from the web client
message ServerUpdate {
  oneof server_message {
    TerminalInput terminal_input = 1;     // Stream data to the host terminal.
    NewShell create_shell = 2;  // ID of the shell that was created.
    uint32 close_shell = 3;     // ID of a shell to close.
    SequenceNumbers sync = 4;   // Periodic sequence number sync
    TerminalSize resize = 5;    // Resize a terminal window
    int64 ping = 6;             // Ping message, request for the timestamp
    string error = 7;           // Error message
  }
}

// Pair of a terminal ID and its associated size
message TerminalSize {
  uint32 shell_id = 1; // Unique identifier for the shell
  uint32 rows = 2;     // Number of rows in the terminal
  uint32 cols = 3;     // Number of columns in the terminal
}

message CloseRequest {
  string session_id = 1; // Machine Name of the host.
}

message CloseResponse {
  bool success = 1; // True if the session was closed successfully.
}

message EncryptedShellData {
  uint64 seq_num = 1;
  repeated bytes data = 2;
  uint64 chunk_offset = 3;
  uint64 byte_offset = 4;
  bool closed = 5;
  int32 winsize_x = 6;
  int32 winsize_y = 7;
  uint32 winsize_rows = 8;
  uint32 winsize_cols = 9;
}

// Snapshot of a session, used to restore state for persistence across servers.
message EncryptedSessionData {
  map<uint32, EncryptedShellData> shells = 1;
  uint32 next_sid = 2;
  uint32 next_uid = 3;
  string name = 4;
}


